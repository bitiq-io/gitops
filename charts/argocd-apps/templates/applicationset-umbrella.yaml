apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: bitiq-umbrella-by-env
  namespace: {{ .Values.argocdNamespace }}
  labels:
    # Ensure the ApplicationSet controller for this Argo CD instance reconciles this resource
    argocd.argoproj.io/instance: {{ .Values.argocdInstanceName | quote }}
spec:
  goTemplate: true
  generators:
    - list:
        elements:
{{- range $e := .Values.envs }}
{{- if or (eq $.Values.envFilter "" ) (eq $.Values.envFilter $e.name) }}
          - env: {{ $e.name }}
            cluster: {{ $e.clusterServer | quote }}
            baseDomain: {{ default $e.baseDomain $.Values.baseDomainOverride | quote }}
            appNamespace: {{ $e.appNamespace | quote }}
            platforms: {{ $e.platforms | quote }}
            toyServiceUpdaterEnabled: {{ default true $e.toyServiceImageUpdater.enabled }}
            toyServiceUpdaterPause: {{ default false $e.toyServiceImageUpdater.pause }}
            toyWebUpdaterEnabled: {{ default true $e.toyWebImageUpdater.enabled }}
            toyWebUpdaterPause: {{ default false $e.toyWebImageUpdater.pause }}
            tektonFsGroup: {{ $e.tektonFsGroup | quote }}
{{- end }}
{{- end }}
  template:
    metadata:
      name: 'bitiq-umbrella-{{ "{{ .env }}" }}'
      labels:
        bitiq.io/env: '{{ "{{ .env }}" }}'
        app.kubernetes.io/name: bitiq-umbrella
        app.kubernetes.io/managed-by: argocd
    spec:
      project: default
      source:
        repoURL: {{ .Values.repoUrl | quote }}
        targetRevision: {{ .Values.targetRevision | quote }}
        path: charts/bitiq-umbrella
        helm:
          parameters:
            - name: env
              value: '{{ "{{ .env }}" }}'
            - name: baseDomain
              value: '{{ "{{ .baseDomain }}" }}'
            - name: appNamespace
              value: '{{ "{{ .appNamespace }}" }}'
            - name: repoUrl
              value: {{ .Values.repoUrl | quote }}
            - name: targetRevision
              value: {{ .Values.targetRevision | quote }}
            - name: imageUpdater.platforms
              value: '{{ "{{ .platforms }}" }}'
            - name: imageUpdater.toyService.enabled
              value: '{{ "{{ .toyServiceUpdaterEnabled | default true }}" }}'
            - name: imageUpdater.toyService.pause
              value: '{{ "{{ .toyServiceUpdaterPause | default false }}" }}'
            - name: imageUpdater.toyWeb.enabled
              value: '{{ "{{ .toyWebUpdaterEnabled | default true }}" }}'
            - name: imageUpdater.toyWeb.pause
              value: '{{ "{{ .toyWebUpdaterPause | default false }}" }}'
            - name: ciPipelines.fsGroup
              value: '{{ "{{ .tektonFsGroup }}" }}'
      destination:
        server: '{{ "{{ .cluster }}" }}'
        namespace: '{{ "{{ .appNamespace }}" }}'
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - CreateNamespace=true
