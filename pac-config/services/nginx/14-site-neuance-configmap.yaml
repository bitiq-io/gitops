apiVersion: v1
kind: ConfigMap
metadata:
  name: site-neuance
  namespace: bitiq-local
binaryData:
  index.html: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Neuance — See the whole conversation</title>
  <meta name="description" content="A context-first social app. Every post shows sources and why it's here. No black boxes.">
  
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      line-height: 1.6;
      color: #1f2937;
      overflow-x: hidden;
    }

    /* Background gradients */
    .bg-gradient {
      min-height: 100vh;
      background: linear-gradient(to bottom right, #ffffff, rgba(243, 232, 255, 0.3), rgba(204, 251, 241, 0.3));
      position: relative;
    }

    .bg-pattern {
      position: absolute;
      inset: 0;
      opacity: 0.03;
      pointer-events: none;
      background-image: radial-gradient(circle at 1px 1px, rgb(124, 92, 255) 1px, transparent 0);
      background-size: 40px 40px;
    }

    .container {
      max-width: 1280px;
      margin: 0 auto;
      padding: 0 1.5rem;
    }

    .container-narrow {
      max-width: 1024px;
      margin: 0 auto;
      padding: 0 1.5rem;
    }

    /* Header */
    header {
      position: relative;
      z-index: 10;
      padding: 1.5rem;
      backdrop-filter: blur(12px);
    }

    .header-content {
      max-width: 1280px;
      margin: 0 auto;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .logo-container {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .logo-icon {
      width: 2rem;
      height: 2rem;
      border-radius: 0.5rem;
      background: linear-gradient(to bottom right, #9333ea, #14b8a6);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }

    .logo-text {
      font-size: 1.25rem;
      letter-spacing: -0.025em;
    }

    .logo-text .regular {
      font-weight: 600;
      color: #111827;
    }

    .logo-text .gradient {
      font-weight: 600;
      background: linear-gradient(to right, #9333ea, #14b8a6);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    nav {
      display: flex;
      gap: 0.75rem;
    }

    .btn {
      padding: 0.625rem 1rem;
      border-radius: 0.5rem;
      font-weight: 500;
      cursor: pointer;
      border: none;
      font-size: 0.875rem;
      transition: all 0.2s;
      text-decoration: none;
      display: inline-block;
    }

    .btn-ghost {
      background: transparent;
      color: #374151;
    }

    .btn-ghost:hover {
      background: rgba(0, 0, 0, 0.05);
      color: #111827;
    }

    .btn-primary {
      background: linear-gradient(to right, #9333ea, #14b8a6);
      color: white;
      box-shadow: 0 10px 15px -3px rgba(147, 51, 234, 0.2);
    }

    .btn-primary:hover {
      opacity: 0.9;
    }

    .btn-lg {
      padding: 0.875rem 2rem;
      font-size: 1.125rem;
    }

    .btn-outline {
      border: 2px solid #d1d5db;
      background: transparent;
      color: #374151;
    }

    .btn-outline:hover {
      border-color: #9ca3af;
    }

    /* Hero Section */
    .hero {
      position: relative;
      z-index: 10;
      padding: 5rem 1.5rem 6rem;
      text-align: center;
    }

    .badge {
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
      padding: 0.375rem 0.75rem;
      background: #f3e8ff;
      color: #7c3aed;
      border-radius: 9999px;
      font-size: 0.875rem;
      font-weight: 500;
      margin-bottom: 1.5rem;
    }

    h1 {
      font-size: clamp(2.5rem, 7vw, 4.5rem);
      font-weight: 700;
      letter-spacing: -0.025em;
      margin-bottom: 1.5rem;
      line-height: 1.1;
      max-width: 56rem;
      margin-left: auto;
      margin-right: auto;
      background: linear-gradient(to bottom right, #111827, #1f2937, #374151);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .lead {
      font-size: clamp(1.125rem, 2.2vw, 1.5rem);
      color: #6b7280;
      max-width: 48rem;
      margin: 0 auto 2.5rem;
      line-height: 1.75;
    }

    .lead .highlight {
      color: #111827;
      font-weight: 500;
    }

    .button-group {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
      margin-bottom: 5rem;
    }

    /* Feature Grid */
    .feature-grid {
      position: relative;
      margin-top: 5rem;
    }

    .gradient-blur {
      position: absolute;
      inset: 0;
      background: linear-gradient(to right, rgba(147, 51, 234, 0.2), rgba(20, 184, 166, 0.2));
      filter: blur(60px);
    }

    .feature-card-main {
      position: relative;
      background: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(12px);
      border: 1px solid #e5e7eb;
      border-radius: 1rem;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.1);
      padding: 3rem;
      max-width: 56rem;
      margin: 0 auto;
    }

    .feature-grid-inner {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 2rem;
    }

    .feature-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .feature-icon {
      width: 4rem;
      height: 4rem;
      border-radius: 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      margin-bottom: 1rem;
      box-shadow: 0 10px 15px -3px rgba(147, 51, 234, 0.3);
    }

    .icon-purple {
      background: linear-gradient(to bottom right, #a855f7, #9333ea);
    }

    .icon-teal {
      background: linear-gradient(to bottom right, #14b8a6, #0d9488);
    }

    .icon-gradient {
      background: linear-gradient(to bottom right, #9333ea, #14b8a6);
    }

    h3 {
      font-size: 1.125rem;
      font-weight: 600;
      color: #111827;
      margin-bottom: 0.5rem;
    }

    .feature-item p {
      font-size: 0.875rem;
      color: #6b7280;
    }

    /* Section Styles */
    .section {
      position: relative;
      z-index: 10;
      padding: 5rem 1.5rem;
    }

    .section-white {
      background: rgba(255, 255, 255, 0.6);
      backdrop-filter: blur(12px);
    }

    .section-gradient {
      background: linear-gradient(to bottom right, #f9fafb, rgba(243, 232, 255, 0.5));
    }

    .section-purple {
      background: linear-gradient(to bottom right, #faf5ff, #f0fdfa);
    }

    .section-title {
      text-align: center;
      margin-bottom: 4rem;
    }

    h2 {
      font-size: clamp(2rem, 5vw, 3rem);
      font-weight: 700;
      letter-spacing: -0.025em;
      color: #111827;
      margin-bottom: 1rem;
    }

    .section-subtitle {
      font-size: 1.25rem;
      color: #6b7280;
      max-width: 42rem;
      margin: 0 auto;
    }

    /* Cards */
    .card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 2rem;
    }

    .card {
      background: white;
      border: 2px solid #e5e7eb;
      border-radius: 1rem;
      padding: 2rem;
      transition: all 0.3s;
    }

    .card:hover {
      border-color: #c084fc;
      box-shadow: 0 20px 25px -5px rgba(147, 51, 234, 0.1);
    }

    .card-icon {
      width: 3rem;
      height: 3rem;
      border-radius: 0.75rem;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 1.5rem;
    }

    .icon-bg-purple {
      background: linear-gradient(to bottom right, #ede9fe, #ddd6fe);
      color: #9333ea;
    }

    .icon-bg-teal {
      background: linear-gradient(to bottom right, #ccfbf1, #99f6e4);
      color: #0d9488;
    }

    .icon-bg-gradient {
      background: linear-gradient(to bottom right, #ede9fe, #ccfbf1);
      color: #9333ea;
    }

    .card h3 {
      font-size: 1.25rem;
      margin-bottom: 0.75rem;
    }

    .card p {
      color: #6b7280;
      line-height: 1.75;
    }

    /* Use Cases */
    .use-case-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.5rem;
    }

    .use-case-item {
      display: flex;
      align-items: start;
      gap: 1rem;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.6);
      backdrop-filter: blur(12px);
      border: 1px solid #e5e7eb;
      border-radius: 1rem;
    }

    .use-case-icon {
      width: 2rem;
      height: 2rem;
      border-radius: 0.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      margin-top: 0.25rem;
    }

    .use-case-icon.purple {
      background: #f3e8ff;
      color: #9333ea;
    }

    .use-case-icon.teal {
      background: #ccfbf1;
      color: #0d9488;
    }

    .use-case-item h3 {
      font-size: 1rem;
      margin-bottom: 0.25rem;
    }

    .use-case-item p {
      font-size: 0.875rem;
      color: #6b7280;
    }

    /* How It Works */
    .steps {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .step-card {
      background: white;
      border: 2px solid #e5e7eb;
      border-radius: 1rem;
      padding: 2rem;
    }

    .step-content {
      display: flex;
      align-items: start;
      gap: 1.5rem;
    }

    .step-number {
      width: 3rem;
      height: 3rem;
      border-radius: 0.75rem;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      font-size: 1.25rem;
      flex-shrink: 0;
    }

    .step-number.purple {
      background: linear-gradient(to bottom right, #a855f7, #9333ea);
    }

    .step-number.teal {
      background: linear-gradient(to bottom right, #14b8a6, #0d9488);
    }

    .step-number.gradient {
      background: linear-gradient(to bottom right, #9333ea, #14b8a6);
    }

    .step-card h3 {
      font-size: 1.25rem;
      margin-bottom: 0.5rem;
    }

    .step-card p {
      color: #6b7280;
    }

    /* Collapsible */
    .collapsible-trigger {
      width: 100%;
      background: white;
      border: 2px solid #e5e7eb;
      border-radius: 1rem;
      padding: 1.5rem;
      margin-top: 3rem;
      cursor: pointer;
      transition: all 0.3s;
      text-align: left;
    }

    .collapsible-trigger:hover {
      border-color: #c084fc;
    }

    .collapsible-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .collapsible-header-left {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .badge-technical {
      padding: 0.25rem 0.625rem;
      background: #f3e8ff;
      color: #7c3aed;
      border-radius: 0.375rem;
      font-size: 0.75rem;
      font-weight: 600;
    }

    .chevron {
      width: 1.25rem;
      height: 1.25rem;
      color: #9ca3af;
      transition: transform 0.3s;
    }

    .chevron.open {
      transform: rotate(180deg);
    }

    .collapsible-content {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease-out;
    }

    .collapsible-content.open {
      max-height: 1000px;
    }

    .collapsible-inner {
      background: white;
      border: 2px solid #e5e7eb;
      border-top: 0;
      border-radius: 0 0 1rem 1rem;
      padding: 0 2rem 2rem;
    }

    .tech-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
    }

    .tech-item {
      display: flex;
      align-items: start;
      gap: 0.75rem;
    }

    .check-icon {
      width: 1.25rem;
      height: 1.25rem;
      flex-shrink: 0;
      margin-top: 0.125rem;
    }

    .check-icon.purple {
      color: #9333ea;
    }

    .check-icon.teal {
      color: #0d9488;
    }

    .tech-item p {
      color: #374151;
      font-size: 0.875rem;
    }

    .tech-item strong {
      color: #111827;
      font-weight: 500;
    }

    /* Team & Status */
    .info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
    }

    .info-card {
      background: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(12px);
      border: 2px solid #e5e7eb;
      border-radius: 1rem;
      padding: 2rem;
    }

    .info-card h2 {
      font-size: 1.5rem;
      margin-bottom: 1.5rem;
    }

    .team-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .team-member h3 {
      font-size: 1rem;
      margin-bottom: 0.25rem;
    }

    .team-member p {
      color: #6b7280;
      font-size: 0.875rem;
    }

    .team-member .role {
      margin-bottom: 0.125rem;
    }

    .team-member .detail {
      font-size: 0.8125rem;
      color: #9ca3af;
    }

    .status-badges {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1rem;
      flex-wrap: wrap;
    }

    .badge-alpha {
      padding: 0.25rem 0.625rem;
      background: #f3e8ff;
      color: #7c3aed;
      border-radius: 0.375rem;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .badge-gray {
      padding: 0.25rem 0.625rem;
      background: #f3f4f6;
      color: #374151;
      border-radius: 0.375rem;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .status-item {
      color: #374151;
      margin-bottom: 0.5rem;
    }

    .status-item strong {
      color: #111827;
      font-weight: 500;
    }

    .status-note {
      color: #6b7280;
    }

    /* Waitlist Form */
    .waitlist-section {
      text-align: center;
      padding: 5rem 1.5rem;
    }

    .waitlist-form {
      max-width: 28rem;
      margin: 0 auto;
    }

    .form-group {
      display: flex;
      gap: 0.75rem;
    }

    .form-input {
      flex: 1;
      height: 3.5rem;
      padding: 0 1rem;
      background: white;
      border: 2px solid #d1d5db;
      border-radius: 0.75rem;
      font-size: 1.125rem;
      color: #111827;
      transition: border-color 0.2s;
    }

    .form-input:focus {
      outline: none;
      border-color: #9333ea;
    }

    .form-input::placeholder {
      color: #9ca3af;
    }

    .btn-submit {
      height: 3.5rem;
      padding: 0 2rem;
    }

    .btn-submit:disabled {
      opacity: 0.7;
      cursor: not-allowed;
    }

    .form-notice {
      font-size: 0.875rem;
      color: #6b7280;
      margin-top: 1rem;
    }

    /* Footer */
    footer {
      position: relative;
      z-index: 10;
      padding: 3rem 1.5rem;
      border-top: 1px solid #e5e7eb;
      background: rgba(255, 255, 255, 0.6);
      backdrop-filter: blur(12px);
      text-align: center;
    }

    .footer-logo {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }

    .footer-logo-icon {
      width: 1.5rem;
      height: 1.5rem;
      border-radius: 0.5rem;
      background: linear-gradient(to bottom right, #9333ea, #14b8a6);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }

    footer p {
      color: #6b7280;
    }

    /* Icons */
    .icon {
      width: 1.5rem;
      height: 1.5rem;
    }

    .icon-sm {
      width: 1.25rem;
      height: 1.25rem;
    }

    .icon-lg {
      width: 2rem;
      height: 2rem;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .feature-grid-inner {
        grid-template-columns: 1fr;
      }

      .card-grid,
      .use-case-grid,
      .info-grid {
        grid-template-columns: 1fr;
      }

      .form-group {
        flex-direction: column;
      }

      nav {
        flex-direction: column;
        width: 100%;
      }

      .btn {
        width: 100%;
        text-align: center;
      }
    }
  </style>
</head>
<body>
  <div class="bg-gradient">
    <div class="bg-pattern"></div>

    <!-- Header -->
    <header>
      <div class="header-content">
        <div class="logo-container">
          <div class="logo-icon">
            <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
            </svg>
          </div>
          <span class="logo-text">
            <span class="regular">neu</span><span class="gradient">ance</span>
          </span>
        </div>
        <nav>
          <a href="#how" class="btn btn-ghost">How it works</a>
          <a href="#waitlist" class="btn btn-primary">Join waitlist</a>
        </nav>
      </div>
    </header>

    <!-- Main Content -->
    <main>
      <!-- Hero Section -->
      <section class="hero">
        <div class="badge">
          <svg class="icon-sm" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
          </svg>
          Context-first social
        </div>
        
        <h1>See the whole conversation.</h1>
        
        <p class="lead">
          Every post shows <span class="highlight">sources</span> and <span class="highlight">why it's here</span>. No black boxes.
        </p>
        
        <div class="button-group">
          <a href="#waitlist" class="btn btn-primary btn-lg">
            Join the waitlist
            <svg style="width: 1rem; height: 1rem; display: inline-block; margin-left: 0.5rem; vertical-align: middle;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
            </svg>
          </a>
          <a href="#how" class="btn btn-outline btn-lg">See how it works</a>
        </div>

        <!-- Feature Grid -->
        <div class="feature-grid">
          <div class="gradient-blur"></div>
          <div class="feature-card-main">
            <div class="feature-grid-inner">
              <div class="feature-item">
                <div class="feature-icon icon-purple">
                  <svg class="icon-lg" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
                  </svg>
                </div>
                <h3>Context graph</h3>
                <p>AI-powered connections</p>
              </div>
              <div class="feature-item">
                <div class="feature-icon icon-teal">
                  <svg class="icon-lg" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
                <h3>Full sources</h3>
                <p>Every claim traced</p>
              </div>
              <div class="feature-item">
                <div class="feature-icon icon-gradient">
                  <svg class="icon-lg" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"></path>
                  </svg>
                </div>
                <h3>Reproducible</h3>
                <p>Open source & verifiable</p>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Value Props -->
      <section class="section section-white">
        <div class="container">
          <div class="section-title">
            <h2>Built for clarity</h2>
            <p class="section-subtitle">Context-first architecture that surfaces signal over noise</p>
          </div>

          <div class="card-grid">
            <div class="card">
              <div class="card-icon icon-bg-purple">
                <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
                </svg>
              </div>
              <h3>Context over noise</h3>
              <p>AI embeddings and a graph of relationships lift signal over sludge. See what matters.</p>
            </div>

            <div class="card">
              <div class="card-icon icon-bg-teal">
                <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
              <h3>Source trail for every post</h3>
              <p>Open a context card to see authors, links, relationships, and ranking factors.</p>
            </div>

            <div class="card">
              <div class="card-icon icon-bg-gradient">
                <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"></path>
                </svg>
              </div>
              <h3>Open & reproducible</h3>
              <p>Export the setup and reproduce results locally. Code, models, and provenance are public.</p>
            </div>
          </div>
        </div>
      </section>

      <!-- Use Cases -->
      <section class="section">
        <div class="container-narrow">
          <div class="section-title">
            <h2>What you can do</h2>
          </div>

          <div class="use-case-grid">
            <div class="use-case-item">
              <div class="use-case-icon purple">
                <svg class="icon-sm" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
              </div>
              <div>
                <h3>Cut through spam & astroturf</h3>
                <p>Filter out noise with evidence-based ranking</p>
              </div>
            </div>

            <div class="use-case-item">
              <div class="use-case-icon teal">
                <svg class="icon-sm" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
                </svg>
              </div>
              <div>
                <h3>Find credible voices</h3>
                <p>Discover topical expertise that's actually earned</p>
              </div>
            </div>

            <div class="use-case-item">
              <div class="use-case-icon purple">
                <svg class="icon-sm" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
                </svg>
              </div>
              <div>
                <h3>Explore the graph</h3>
                <p>Navigate the full conversation context</p>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- How It Works -->
      <section id="how" class="section section-gradient">
        <div class="container-narrow">
          <div class="section-title">
            <h2>How it works</h2>
            <p class="section-subtitle">Three-stage pipeline for context-aware content</p>
          </div>

          <div class="steps">
            <div class="step-card">
              <div class="step-content">
                <div class="step-number purple">1</div>
                <div>
                  <h3>Ingest</h3>
                  <p>Public, signature‑attested posts only. Verified at the protocol level.</p>
                </div>
              </div>
            </div>

            <div class="step-card">
              <div class="step-content">
                <div class="step-number teal">2</div>
                <div>
                  <h3>Understand</h3>
                  <p>AI embeddings capture semantic meaning beyond keywords. Deep context awareness.</p>
                </div>
              </div>
            </div>

            <div class="step-card">
              <div class="step-content">
                <div class="step-number gradient">3</div>
                <div>
                  <h3>Rank & explain</h3>
                  <p>Tunable evidence graph and relevance scores surface better results with a "Why this post" receipt.</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Tech Details -->
          <button class="collapsible-trigger" id="techTrigger">
            <div class="collapsible-header">
              <div class="collapsible-header-left">
                <span class="badge-technical">Technical</span>
                <span style="color: #111827;">For developers & reviewers</span>
              </div>
              <svg class="chevron" id="chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </button>
          
          <div class="collapsible-content" id="techContent">
            <div class="collapsible-inner">
              <div class="tech-grid">
                <div>
                  <div class="tech-item">
                    <svg class="check-icon purple" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <p>Vector search with <strong>Couchbase 7.6</strong> FTS vector indexes</p>
                  </div>
                  <div class="tech-item">
                    <svg class="check-icon purple" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <p>GPU graph scoring via <strong>RAPIDS cuGraph</strong></p>
                  </div>
                  <div class="tech-item">
                    <svg class="check-icon purple" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <p>Model serving with <strong>NVIDIA Triton</strong></p>
                  </div>
                </div>
                <div>
                  <div class="tech-item">
                    <svg class="check-icon teal" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <p>Optional <strong>TensorRT‑LLM</strong> optimizations</p>
                  </div>
                  <div class="tech-item">
                    <svg class="check-icon teal" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <p><strong>Provenance trail</strong>: model cards, configs, eval reports</p>
                  </div>
                  <div class="tech-item">
                    <svg class="check-icon teal" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <p><strong>OpenShift + GitOps</strong>; cloud‑agnostic</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Team & Status -->
      <section class="section">
        <div class="container-narrow">
          <div class="info-grid">
            <div class="info-card">
              <h2>Team</h2>
              <div class="team-list">
                <div class="team-member">
                  <h3>Paul Capestany</h3>
                  <p class="role">Founder & Full‑Stack</p>
                  <p class="detail">ex‑SRE; distributed systems & data</p>
                </div>
                <div class="team-member">
                  <h3>Traun Leyden</h3>
                  <p class="role">Senior Software & Deep Learning Engineer</p>
                </div>
              </div>
            </div>

            <div class="info-card">
              <h2>Status</h2>
              <div class="status-badges">
                <span class="badge-alpha">Alpha</span>
                <span class="badge-gray">Public data only</span>
              </div>
              <p class="status-item">Target latency: <strong>sub‑1s P50</strong> for common queries</p>
              <p class="status-note">Open‑source: GitHub (coming soon)</p>
            </div>
          </div>
        </div>
      </section>

      <!-- Waitlist -->
      <section id="waitlist" class="section section-purple">
        <div class="waitlist-section">
          <h2>Join the waitlist</h2>
          <p class="section-subtitle" style="margin-bottom: 2.5rem;">Be among the first to experience context-first social</p>
          
          <form class="waitlist-form" id="waitlistForm">
            <div class="form-group">
              <input
                type="email"
                placeholder="you@example.com"
                aria-label="Email"
                id="emailInput"
                required
                class="form-input"
              />
              <button type="submit" class="btn btn-primary btn-lg btn-submit" id="submitBtn">
                <span id="submitText">Notify me</span>
              </button>
            </div>
            <p class="form-notice">By submitting, you agree to be contacted about the Neuance beta.</p>
          </form>
        </div>
      </section>
    </main>

    <!-- Footer -->
    <footer>
      <div class="footer-logo">
        <div class="footer-logo-icon">
          <svg style="width: 1rem; height: 1rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
          </svg>
        </div>
        <span class="logo-text">
          <span class="regular">neu</span><span class="gradient">ance</span>
        </span>
      </div>
      <p>© 2025 Neuance Inc. All rights reserved. MIT‑licensed code.</p>
    </footer>
  </div>

  <script>
    // Smooth scrolling
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({ behavior: 'smooth' });
        }
      });
    });

    // Collapsible
    const trigger = document.getElementById('techTrigger');
    const content = document.getElementById('techContent');
    const chevron = document.getElementById('chevron');
    let isOpen = false;

    trigger.addEventListener('click', () => {
      isOpen = !isOpen;
      content.classList.toggle('open');
      chevron.classList.toggle('open');
    });

    // Form submission
    const form = document.getElementById('waitlistForm');
    const emailInput = document.getElementById('emailInput');
    const submitBtn = document.getElementById('submitBtn');
    const submitText = document.getElementById('submitText');

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      if (emailInput.value) {
        console.log('Waitlist submission:', emailInput.value);
        
        // Show success state
        submitBtn.disabled = true;
        submitText.innerHTML = '<svg style="width: 1.25rem; height: 1.25rem; display: inline-block; margin-right: 0.5rem; vertical-align: middle;" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>Added!';
        
        // Reset after 3 seconds
        setTimeout(() => {
          emailInput.value = '';
          submitBtn.disabled = false;
          submitText.textContent = 'Notify me';
        }, 3000);
      }
    });
  </script>
</body>
</html>

